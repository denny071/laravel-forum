<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;

class ReadThreadsTest extends TestCase
{
    use DatabaseMigrations;

    protected $thread;

    protected function setUp():void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->thread = create("App\Models\Thread");
    }

    /** @test */
    public function a_user_can_view_all_threads()
    {
        $this->get('/threads')
            ->assertSee($this->thread->title);
    }

    /** @test */
    public function a_user_can_read_a_single_thread()
    {
        $this->get($this->thread->path())->assertSee($this->thread->title);
    }

    /** @test */
    public function a_user_can_read_replies_that_are_associated_with_a_thread()
    {
        // if there is a thread and the thread has a reply
        $reply = create('App\Models\Reply',['thread_id' => $this->thread->id]);
        // So when we see thread,  we also see replies
        $this->get($this->thread->path())->assertSee($reply->body);
    }

    /** @test */
    public function a_user_can_filter_threads_according_to_a_channel()
    {
        $channel = create('App\Models\Channel');
        $threadInChannel = create('App\Models\Thread', ['channel_id' => $channel->id]);
        $threadNotInChannel = create('App\Models\Thread');

        $this->get("/threads/". $channel->slug)
            ->assertSee($threadInChannel->title)
            ->assertDontSee($threadNotInChannel->title);
    }

    /** @test */
    public function a_user_can_filter_threads_by_any_username()
    {
        $this->signIn(create('App\Models\User',['name' => 'NoNo1']));

        $threadByNoNo1 = create('App\Models\Thread',['user_id' => auth()->id()]);
        $threadNotNoNo1 = create('App\Models\Thread');

        $this->get("threads?by=NoNo1")
            ->assertSee($threadByNoNo1->title)
            ->assertDontSee($threadNotNoNo1->title);
    }


    /** @test */
    public function a_user_can_filter_threads_by_popularity()
    {
        $threadWithTwoReplies = create('App\Models\Thread');
        create('App\Models\Reply', ['thread_id' => $threadWithTwoReplies->id], 2);

        $threadWithThreeReplies = create('App\Models\Thread');
        create('App\Models\Reply', ['thread_id' => $threadWithThreeReplies->id], 3);


        $response = $this->getJson('threads?popularity=1')->json();

        $this->assertEquals([3, 2, 0], array_column($response, 'replies_count'));
    }


    /** @test */
    public function a_user_can_request_all_replies_for_a_given_thread()
    {
        $thread = create("App\Models\Thread");
        create('App\Models\Reply', ['thread_id' => $thread->id], 40);

        $response = $this->getJson($thread->path() . '/replies')->json();

        $this->assertCount(10,$response['data']);
        $this->assertEquals(40,$response['total']);

    }


    /** @test */
    public function a_user_can_filter_threads_by_those_that_are_unanswered()
    {
        $thread = create('App\Models\Thread');
        create('App\Models\Reply',['thread_id' => $thread->id]);

        $response = $this->getJson('threads?unanswered=1')->json();

        $this->assertCount(1,$response);
    }

}
